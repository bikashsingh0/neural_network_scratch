#!/bin/python3
# XOR and XNOR cannot be linearly separated, so perceptron cannot give correct result

import sys
import numpy as np
sys.path.append('..')
from neural_network import NeuralNetwork

inputLen = 2
hiddenLen = 2
outputLen = 1
learningRate = 0.1
n = NeuralNetwork(inputLen, hiddenLen, outputLen)
# n = NeuralNetwork(2, 2, 1)

for i in range(1000):
    inputs = np.array([
        [0],
        [0]
        ])
    targets = np.array([
        [0],
        ])

    # n.feedForward(inputs)
    n.trainSVLearing(inputs, targets, learningRate)

    inputs = np.array([
        [0],
        [1]
        ])
    targets = np.array([
        [1],
        ])

    # n.feedForward(inputs)
    n.trainSVLearing(inputs, targets, learningRate)

    inputs = np.array([
        [1],
        [0]
        ])
    targets = np.array([
        [1],
        ])

    # n.feedForward(inputs)
    n.trainSVLearing(inputs, targets, learningRate)

    inputs = np.array([
        [1],
        [1]
        ])
    targets = np.array([
        [0],
        ])

    n.trainSVLearing(inputs, targets, learningRate)

inputs = np.array([
    [0],
    [0]
    ])
n.feedForward(inputs)

inputs = np.array([
    [0],
    [1]
    ])
n.feedForward(inputs)

inputs = np.array([
    [1],
    [0]
    ])
n.feedForward(inputs)

inputs = np.array([
    [1],
    [1]
    ])
n.feedForward(inputs)
